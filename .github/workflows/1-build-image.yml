name: 1. Build and Push Docker Image (DISABLED - Use 0-integrated-pipeline.yml)

# Disabled in favor of integrated pipeline
# on:
#   push:
#     branches:
#       - main
#     paths:
#       - 'src/**'
#       - 'docker/**'
#       - 'nginx/**'
#       - '.github/workflows/**'
#   workflow_dispatch:
#     inputs:
#       image_type:
#         description: 'Image type to build (blue or green)'
#         required: true
#         default: 'blue'
#         type: choice
#         options:
#         - blue
#         - green
#       image_tag:
#         description: 'Image tag (e.g., v1.0.0, latest)'
#         required: true
#         default: 'latest'
#         type: string

# Manual trigger only for testing
on:
  workflow_dispatch:
    inputs:
      image_type:
        description: 'Image type to build (blue or green)'
        required: true
        default: 'blue'
        type: choice
        options:
        - blue
        - green
      image_tag:
        description: 'Image tag (e.g., v1.0.0, latest)'
        required: true
        default: 'latest'
        type: string

permissions:
  contents: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-northeast-2' }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY || '319867767576.dkr.ecr.ap-northeast-2.amazonaws.com' }}

jobs:
  build-image:
    runs-on: ubuntu-latest
    outputs:
      image_type: ${{ steps.set-defaults.outputs.image_type }}
      image_tag: ${{ steps.set-defaults.outputs.image_tag }}
      chart_version: ${{ steps.set-defaults.outputs.chart_version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set default values for push events
      id: set-defaults
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          echo "image_type=blue" >> $GITHUB_OUTPUT
          echo "chart_version=$(date +1.%Y%m%d.%H%M)" >> $GITHUB_OUTPUT
          echo "image_tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        else
          echo "image_type=${{ github.event.inputs.image_type }}" >> $GITHUB_OUTPUT
          echo "chart_version=$(date +1.%Y%m%d.%H%M)" >> $GITHUB_OUTPUT
          echo "image_tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
        
    - name: Prepare source files for Docker build
      run: |
        mkdir -p docker-build
        
        # Use source HTML file as-is
        echo "✅ Copying source HTML file"
        cp src/index.html docker-build/index.html
        
        # Create Dockerfile
        cat << 'EOF' > docker-build/Dockerfile
        FROM nginx:alpine
        COPY index.html /usr/share/nginx/html/index.html
        EXPOSE 80
        EOF
        
    - name: Build Docker image
      run: |
        cd docker-build
        echo "🐳 Building Docker image: onboarding:${{ steps.set-defaults.outputs.image_tag }}"
        docker build -t onboarding:${{ steps.set-defaults.outputs.image_tag }} .
        
    - name: Tag image for ECR
      run: |
        echo "🏷️ Tagging image for ECR"
        docker tag onboarding:${{ steps.set-defaults.outputs.image_tag }} \
          ${{ env.ECR_REGISTRY }}/onboarding:${{ steps.set-defaults.outputs.image_tag }}
        
    - name: Push image to ECR
      run: |
        echo "📤 Pushing image to ECR"
        docker push ${{ env.ECR_REGISTRY }}/onboarding:${{ steps.set-defaults.outputs.image_tag }}
        echo "✅ Image pushed successfully!"
        
    - name: Save build info
      run: |
        echo "IMAGE_TYPE=${{ steps.set-defaults.outputs.image_type }}" >> build-info.txt
        echo "IMAGE_TAG=${{ steps.set-defaults.outputs.image_tag }}" >> build-info.txt
        echo "CHART_VERSION=${{ steps.set-defaults.outputs.chart_version }}" >> build-info.txt
        echo "ECR_IMAGE=${{ env.ECR_REGISTRY }}/onboarding:${{ steps.set-defaults.outputs.image_tag }}" >> build-info.txt
        echo "COMMIT_SHA=${{ github.sha }}" >> build-info.txt
        
    - name: Upload build info
      uses: actions/upload-artifact@v4
      with:
        name: build-info
        path: build-info.txt
        retention-days: 1

  trigger-next-workflow:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
    - name: Trigger Helm Chart Update
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        script: |
          github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: '2-update-chart.yml',
            ref: 'main',
            inputs: {
              image_type: '${{ needs.build-image.outputs.image_type }}',
              image_tag: '${{ needs.build-image.outputs.image_tag }}',
              chart_version: '${{ needs.build-image.outputs.chart_version }}'
            }
          }) 